name: 'Terraform'
on: 
  workflow_dispatch:
    inputs:
      region:
        description: "The AWS region."
        required: false
        default: 'us-east-1'
        type: choice
        options:
        - us-east-1
        - us-west-2
        - ap-south-1
      website_domain_name:
        description: "The domain name of the static website."
        required: true
        type: string
      stage:
        description: "The name of the environment where the resources will be deployed."
        required: false
        type: choice
        options:
        - demo
        - dev
        - stag
        - prod
        default: 'demo'
      namespace:
        description: "ID element. Usually an abbreviation of your organization name, e.g. 'eg' or 'cp', to help ensure generated IDs are globally unique"
        required: true
        type: string
        default: 'cp'
      route53_hosted_zone_id:
        description: 'The Route53 hosted zone id of the domain name.'
        required: true
        type: string

env:
  AWS_REGION: ${{ github.event.inputs.region }}
  AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  DOMAIN_NAME: ${{ github.event.inputs.website_domain_name }}
  TF_VAR_region: ${{ github.event.inputs.region }}
  TF_VAR_website_domain_name: ${{ github.event.inputs.website_domain_name }}
  TF_VAR_stage: ${{ github.event.inputs.stage }}
  TF_VAR_namespace: ${{ github.event.inputs.namespace }}
  TF_VAR_route53_hosted_zone_id: ${{ github.event.inputs.route53_hosted_zone_id }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7
          terraform_wrapper: false
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
      - name: Set S3 bucket Env
        id: set_env
        run: echo "AWS_S3_BUCKET=$(terraform output --raw s3_bucket_name)" >> $GITHUB_ENV
      - name: Sync source code to S3 bucket
        uses: jakejarvis/s3-sync-action@master
        env:
          SOURCE_DIR: './src'
      - name: Smoke test
        id: smoke_test
        run: |
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://www.$DOMAIN_NAME")
          if [ "$STATUS_CODE" -ne 200 ]; then exit 1 ; fi
